import jittor as jt
from jittor import init
from jittor import nn

jt.flags.use_cuda = 1

class TrunkDe(nn.Module):

    def __init__(self):
        super(TrunkDe, self).__init__()
        self.conv_1_2 = nn.Conv(64, 64, 1)
        self.bn_1_2 = nn.BatchNorm(64)
        self.conv_2_2 = nn.Conv(64, 64, 1)
        self.bn_2_2 = nn.BatchNorm(64)
        self.conv_2_3 = nn.Conv(64, 64, 1)
        self.bn_2_3 = nn.BatchNorm(64)
        self.conv_3_3 = nn.Conv(64, 64, 1)
        self.bn_3_3 = nn.BatchNorm(64)
        self.conv_3_4 = nn.Conv(64, 64, 1)
        self.bn_3_4 = nn.BatchNorm(64)
        self.conv_4_4 = nn.Conv(64, 64, 1)
        self.bn_4_4 = nn.BatchNorm(64)
        self.conv_4_5 = nn.Conv(64, 64, 1)
        self.bn_4_5 = nn.BatchNorm(64)
        self.conv_5_5 = nn.Conv(64, 64, 1)
        self.bn_5_5 = nn.BatchNorm(64)
        self.conv_21 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_21 = nn.BatchNorm(64)
        self.conv_31 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_31 = nn.BatchNorm(64)
        self.conv_41 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_41 = nn.BatchNorm(64)
        self.conv_51 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_51 = nn.BatchNorm(64)
        self.conv_21_3 = nn.Conv(64, 64, 1)
        self.bn_21_3 = nn.BatchNorm(64)
        self.conv_31_3 = nn.Conv(64, 64, 1)
        self.bn_31_3 = nn.BatchNorm(64)
        self.conv_31_4 = nn.Conv(64, 64, 1)
        self.bn_31_4 = nn.BatchNorm(64)
        self.conv_41_4 = nn.Conv(64, 64, 1)
        self.bn_41_4 = nn.BatchNorm(64)
        self.conv_41_5 = nn.Conv(64, 64, 1)
        self.bn_41_5 = nn.BatchNorm(64)
        self.conv_51_5 = nn.Conv(64, 64, 1)
        self.bn_51_5 = nn.BatchNorm(64)
        self.conv_32 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_32 = nn.BatchNorm(64)
        self.conv_42 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_42 = nn.BatchNorm(64)
        self.conv_52 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_52 = nn.BatchNorm(64)
        self.conv_32_4 = nn.Conv(64, 64, 1)
        self.bn_32_4 = nn.BatchNorm(64)
        self.conv_42_4 = nn.Conv(64, 64, 1)
        self.bn_42_4 = nn.BatchNorm(64)
        self.conv_42_5 = nn.Conv(64, 64, 1)
        self.bn_42_5 = nn.BatchNorm(64)
        self.conv_52_5 = nn.Conv(64, 64, 1)
        self.bn_52_5 = nn.BatchNorm(64)
        self.conv_43 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_43 = nn.BatchNorm(64)
        self.conv_53 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_53 = nn.BatchNorm(64)
        self.conv_43_5 = nn.Conv(64, 64, 1)
        self.bn_43_5 = nn.BatchNorm(64)
        self.conv_53_5 = nn.Conv(64, 64, 1)
        self.bn_53_5 = nn.BatchNorm(64)
        self.conv_54 = nn.Conv(64, 64, 3, stride=1, padding=1)
        self.bn_54 = nn.BatchNorm(64)

    def execute(self, in_feat):
        out_1_2 = nn.interpolate(in_feat[0], size=in_feat[1].shape[2:], mode='bilinear')
        out_1_2 = nn.relu(self.bn_1_2(self.conv_1_2(out_1_2)))
        out_2_2 = in_feat[1]
        out_2_2 = nn.relu(self.bn_2_2(self.conv_2_2(out_2_2)))
        out_2_3 = nn.interpolate(in_feat[1], size=in_feat[2].shape[2:], mode='bilinear')
        out_2_3 = nn.relu(self.bn_2_3(self.conv_2_3(out_2_3)))
        out_3_3 = in_feat[2]
        out_3_3 = nn.relu(self.bn_3_3(self.conv_3_3(out_3_3)))
        out_3_4 = nn.interpolate(in_feat[2], size=in_feat[3].shape[2:], mode='bilinear')
        out_3_4 = nn.relu(self.bn_3_4(self.conv_3_4(out_3_4)))
        out_4_4 = in_feat[3]
        out_4_4 = nn.relu(self.bn_4_4(self.conv_4_4(out_4_4)))
        out_4_5 = nn.interpolate(in_feat[3], size=in_feat[4].shape[2:], mode='bilinear')
        out_4_5 = nn.relu(self.bn_4_5(self.conv_4_5(out_4_5)))
        out_5_5 = in_feat[4]
        out_5_5 = nn.relu(self.bn_5_5(self.conv_5_5(out_5_5)))
        out_21 = (out_1_2 + out_2_2)
        out_21 = nn.relu(self.bn_21(self.conv_21(out_21)))
        out_31 = (out_2_3 + out_3_3)
        out_31 = nn.relu(self.bn_31(self.conv_31(out_31)))
        out_41 = (out_3_4 + out_4_4)
        out_41 = nn.relu(self.bn_41(self.conv_41(out_41)))
        out_51 = (out_4_5 + out_5_5)
        out_51 = nn.relu(self.bn_51(self.conv_51(out_51)))
        out_21_3 = nn.interpolate(out_21, size=in_feat[2].shape[2:], mode='bilinear')
        out_21_3 = nn.relu(self.bn_21_3(self.conv_21_3(out_21_3)))
        out_31_3 = out_31
        out_31_3 = nn.relu(self.bn_31_3(self.conv_31_3(out_31_3)))
        out_31_4 = nn.interpolate(out_31, size=in_feat[3].shape[2:], mode='bilinear')
        out_31_4 = nn.relu(self.bn_31_4(self.conv_31_4(out_31_4)))
        out_41_4 = out_41
        out_41_4 = nn.relu(self.bn_41_4(self.conv_41_4(out_41_4)))
        out_41_5 = nn.interpolate(out_41, size=in_feat[4].shape[2:], mode='bilinear')
        out_41_5 = nn.relu(self.bn_41_5(self.conv_41_5(out_41_5)))
        out_51_5 = out_51
        out_51_5 = nn.relu(self.bn_51_5(self.conv_51_5(out_51_5)))
        out_32 = (out_21_3 + out_31_3)
        out_32 = nn.relu(self.bn_32(self.conv_32(out_32)))
        out_42 = (out_31_4 + out_41_4)
        out_42 = nn.relu(self.bn_42(self.conv_42(out_42)))
        out_52 = (out_41_5 + out_51_5)
        out_52 = nn.relu(self.bn_52(self.conv_52(out_52)))
        out_32_4 = nn.interpolate(out_32, size=in_feat[3].shape[2:], mode='bilinear')
        out_32_4 = nn.relu(self.bn_32_4(self.conv_32_4(out_32_4)))
        out_42_4 = out_42
        out_42_4 = nn.relu(self.bn_42_4(self.conv_42_4(out_42_4)))
        out_42_5 = nn.interpolate(out_42, size=in_feat[4].shape[2:], mode='bilinear')
        out_42_5 = nn.relu(self.bn_42_5(self.conv_42_5(out_42_5)))
        out_52_5 = out_52
        out_52_5 = nn.relu(self.bn_52_5(self.conv_52_5(out_52_5)))
        out_43 = (out_32_4 + out_42_4)
        out_43 = nn.relu(self.bn_43(self.conv_43(out_43)))
        out_53 = (out_52_5 + out_42_5)
        out_53 = nn.relu(self.bn_53(self.conv_53(out_53)))
        out_43_5 = nn.interpolate(out_43, size=in_feat[4].shape[2:], mode='bilinear')
        out_43_5 = nn.relu(self.bn_43_5(self.conv_43_5(out_43_5)))
        out_53_5 = out_53
        out_53_5 = nn.relu(self.bn_53_5(self.conv_53_5(out_53_5)))
        out_54 = (out_43_5 + out_53_5)
        out_54 = nn.relu(self.bn_54(self.conv_54(out_54)))
        return out_32, out_43, out_54
